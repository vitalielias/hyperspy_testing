import hyperspy.api as hsimport jsonimport osfrom hyperspy.io_plugins import io_pluginsimport numpy as npdef read_meta_data(path,subfolders:bool):    #list all things in start directory    files = os.listdir(path)    for file in files:        filepath=os.path.join(path, file)        #check for subfolders and apply function recursive        if os.path.isdir(filepath) and subfolders:            read_meta_data(filepath,True)        if os.path.isfile(filepath):            loaded = False            #check if the file type can be read by hs            extension = filepath.split(".")[-1]            rdrs = [rdr for rdr in io_plugins if extension.lower() in rdr.file_extensions]            if rdrs:                #load file into hs                try:                    f = hs.load(filepath)                    loaded =True                 except:                    print (f"Error loading file {file} in {path}")                if loaded:                    #write original file metadata to json file                    new_name= f"{file}_meta.json"                    outfile = open(os.path.join(path,new_name), "w")                    try:                        json.dump(f.original_metadata.as_dictionary(),outfile)                        outfile.close()                        print(f"Extracted metadata into {new_name}")                    except:                        outfile.close()                        os.remove(os.path.join(path,new_name))                        print(f"Error writing metadata of {file} in {path}")                                else:                print(f"hyperspy cannot read .{extension} files, skipping {file} in {path}")def enter_path():    path_input=input("Please enter a folder path to extract all metadata from EM-Data files:\n")    if os.path.exists(path_input):        path = path_input        check_files(path)    else:        print("Path was not found!")        enter_path()    return pathdef check_files(path,f=[0,0,0,0,0], sub = False):    #f = hsreadable,total,subdirs,hsreadable in subdirs, total in subdirs    files = os.listdir(path)    for file in files:         filepath=os.path.join(path, file)        if os.path.isdir(filepath):            f[2]+=1            #perform function recursively in subfolders and add the counters            np.add(check_files(filepath,f,sub=True),f)        if os.path.isfile(filepath):            f[1] += 1            if sub:                f[4] += 1            #check if hs has a reader implemented            extension = filepath.split(".")[-1]            rdrs = [rdr for rdr in io_plugins if extension.lower() in rdr.file_extensions]            if rdrs:                f[0] += 1                if sub:                    f[3]+=1    if sub:        #return values for recursion        return f    else:        print(f"""        {f[1]-f[4]} total files and {f[3]} subdirectories found in {path}        {f[0]-f[3]} hyperspy-readable files found in path        {f[4]} total files found in subdirectories        {f[3]} hyperspy-readable files found in subdirectories        """)def subdirectories():    i = input("Do you also extract metadata from files in subdirectories? (y/n)\n")    if i == "y":        return True    elif i == "n":        return False    else:        print("Input not valid\n")        subdirectories()if __name__ == "__main__":    path=enter_path()    read_meta_data(path,subdirectories())